<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>beginner on C&#43;&#43; FAQ</title>
    <link>https://64.github.io/cpp-faq/tags/beginner/</link>
    <description>Recent content in beginner on C&#43;&#43; FAQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://64.github.io/cpp-faq/tags/beginner/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How do I enable compiler warnings?</title>
      <link>https://64.github.io/cpp-faq/enable-warnings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/enable-warnings/</guid>
      <description>For gcc and clang users: Add -Wall -Wextra to your compilation flags.
Other useful options include:
 -Werror: treats warnings as if they were errors -pedantic: generates warnings if you use any language extensions -Wno-x: disables warning x, e.g if the compiler gives you a -Wunused-variable warning, you can turn it off with -Wno-unused-variable  (Note that, contrary to what the name -Wall may imply, this does not enable all warnings, but it does enable most of the important ones.</description>
    </item>
    
    <item>
      <title>What are &#39;Unspecified&#39; and &#39;Implementation-Defined&#39; behavior?</title>
      <link>https://64.github.io/cpp-faq/unspecified-impldefined/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/unspecified-impldefined/</guid>
      <description>Unlike undefined behavior, unspecified and implementation-defined behavior occur all the time in a normal C++ program. Making use of unspecified/implementation-defined behavior is unavoidable, but relying on specific behavior can be fatal.
The C++ standard does not specify what happens in every scenario, so the implementation has the freedom to implement behavior, constants, macro definitions, and more in multiple possible ways.
Unspecified Behavior unspecified by the standard is not necessary to document, but still valid.</description>
    </item>
    
    <item>
      <title>What is &#39;Undefined Behaviour&#39;?</title>
      <link>https://64.github.io/cpp-faq/undefined-behaviour/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/undefined-behaviour/</guid>
      <description>Undefined Behaviour (also known as UB) occurs when you violate certain language rules. These rules include (but are not limited to): dereferencing a null pointer, signed integer overflow, accessing through a dangling reference, or accessing through an unaligned pointer.
When undefined behaviour occurs, the C and C++ standards do not place any restrictions on what your program might do. In other words, your program may crash, or continue execution, or call some seemingly unrelated piece of code, or print 42 and open xkcd in your web browser.</description>
    </item>
    
    <item>
      <title>What is a &#39;Member Initalizer List&#39; and why should I use it?</title>
      <link>https://64.github.io/cpp-faq/member-initializer-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/member-initializer-list/</guid>
      <description>Constructors in C++ are used to initialize the data members of a class. First, it&amp;rsquo;s important to understand the terminology:
struct wrapper { int value; wrapper(int v) : value{v} { } }; Our class wrapper has a constructor, consisting of four parts:
 the class name wrapper the parameter list int v in parentheses the member initializer list value{v}, separated by a : from the parameter list the constructor body {}, which is empty in this case  In most other languages that have classes and constructors, the initialization simply takes place in the constructor body.</description>
    </item>
    
    <item>
      <title>Why is `using namespace std` considered bad practice?</title>
      <link>https://64.github.io/cpp-faq/using-namespace-std/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/using-namespace-std/</guid>
      <description>Consider this code:
#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; int swap = 0; int main() { cout &amp;lt;&amp;lt; swap &amp;lt;&amp;lt; endl; // ERROR: reference to &amp;#34;swap&amp;#34; is ambiguous } Here, the compiler throws an error because it doesn&amp;rsquo;t know whether you refer to your swap global variable, or the std::swap function inside the &amp;lt;algorithm&amp;gt; header.
That is to say, using namespace is considered bad practice because it leads to name collisions, and it also makes your code less clear.</description>
    </item>
    
  </channel>
</rss>
