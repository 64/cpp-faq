<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Faqs on C &amp; C&#43;&#43; FAQ</title>
    <link>https://64.github.io/cpp-faq/faq/</link>
    <description>Recent content in Faqs on C &amp; C&#43;&#43; FAQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Mar 2021 02:26:05 +0000</lastBuildDate><atom:link href="https://64.github.io/cpp-faq/faq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is &#39;Undefined Behaviour&#39;?</title>
      <link>https://64.github.io/cpp-faq/ub/</link>
      <pubDate>Tue, 23 Mar 2021 02:26:05 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/ub/</guid>
      <description>Undefined Behaviour (also known as UB) occurs when you violate certain language rules. These rules include (but are not limited to): dereferencing a nullptr, signed integer overflow, accessing through a dangling reference, or accessing through an unaligned pointer.
When undefined behaviour occurs, the C and C++ standards do not place any restrictions on what your program might do. In other words, your program may crash, or continue execution, or call some seemingly unrelated piece of code, or print 42 and open xkcd in your web browser.</description>
    </item>
    
    <item>
      <title>About this site</title>
      <link>https://64.github.io/cpp-faq/about-this-site/</link>
      <pubDate>Tue, 23 Mar 2021 02:16:33 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/about-this-site/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>How do I enable compiler warnings?</title>
      <link>https://64.github.io/cpp-faq/how-do-i-enable-compiler-warnings/</link>
      <pubDate>Tue, 23 Mar 2021 01:56:40 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/how-do-i-enable-compiler-warnings/</guid>
      <description>For gcc and clang users Add -Wall -Wextra to your compilation flags, enable -Werror so your compiler will treat warnings as errors, also you may need to enable -pedantic to disable gnu extensions
(Note that, contrary to what the name -Wall may imply, this does not enable all warnings, but it does enable most of the important ones.)
For Visual Studio users Unlike gcc and clang, Visual Studio does enable some warnings by default.</description>
    </item>
    
    <item>
      <title>Why using namespace std is considered bad practice?</title>
      <link>https://64.github.io/cpp-faq/why-using-namespace-std-is-considered-bad-practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://64.github.io/cpp-faq/why-using-namespace-std-is-considered-bad-practice/</guid>
      <description>Consider this code:
#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; int swap = 0; int main() { cout &amp;lt;&amp;lt; swap &amp;lt;&amp;lt; endl; // error: reference to &amp;#34;swap&amp;#34; is ambiguous  return 0; } There the compiler throws an error because swap is also a function inside the algorithm header. Compiler doesn&amp;rsquo;t know what to do in this case.
So using namespace is considered a bad practice because makes your code less clear, and in the example leads to name collision.</description>
    </item>
    
  </channel>
</rss>
